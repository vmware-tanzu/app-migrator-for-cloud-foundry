/* 
 *  Copyright 2022 VMware, Inc.
 *  
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/vmware-tanzu/app-migrator-for-cloud-foundry/pkg/context"
)

type FakeAutoScalerExporter struct {
	ExportAutoScalerInstancesStub        func(*context.Context, cfclient.Org, cfclient.Space, cfclient.App, string) error
	exportAutoScalerInstancesMutex       sync.RWMutex
	exportAutoScalerInstancesArgsForCall []struct {
		arg1 *context.Context
		arg2 cfclient.Org
		arg3 cfclient.Space
		arg4 cfclient.App
		arg5 string
	}
	exportAutoScalerInstancesReturns struct {
		result1 error
	}
	exportAutoScalerInstancesReturnsOnCall map[int]struct {
		result1 error
	}
	ExportAutoScalerRulesStub        func(*context.Context, cfclient.Org, cfclient.Space, cfclient.App, string) error
	exportAutoScalerRulesMutex       sync.RWMutex
	exportAutoScalerRulesArgsForCall []struct {
		arg1 *context.Context
		arg2 cfclient.Org
		arg3 cfclient.Space
		arg4 cfclient.App
		arg5 string
	}
	exportAutoScalerRulesReturns struct {
		result1 error
	}
	exportAutoScalerRulesReturnsOnCall map[int]struct {
		result1 error
	}
	ExportAutoScalerSchedulesStub        func(*context.Context, cfclient.Org, cfclient.Space, cfclient.App, string) error
	exportAutoScalerSchedulesMutex       sync.RWMutex
	exportAutoScalerSchedulesArgsForCall []struct {
		arg1 *context.Context
		arg2 cfclient.Org
		arg3 cfclient.Space
		arg4 cfclient.App
		arg5 string
	}
	exportAutoScalerSchedulesReturns struct {
		result1 error
	}
	exportAutoScalerSchedulesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerInstances(arg1 *context.Context, arg2 cfclient.Org, arg3 cfclient.Space, arg4 cfclient.App, arg5 string) error {
	fake.exportAutoScalerInstancesMutex.Lock()
	ret, specificReturn := fake.exportAutoScalerInstancesReturnsOnCall[len(fake.exportAutoScalerInstancesArgsForCall)]
	fake.exportAutoScalerInstancesArgsForCall = append(fake.exportAutoScalerInstancesArgsForCall, struct {
		arg1 *context.Context
		arg2 cfclient.Org
		arg3 cfclient.Space
		arg4 cfclient.App
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.ExportAutoScalerInstancesStub
	fakeReturns := fake.exportAutoScalerInstancesReturns
	fake.recordInvocation("ExportAutoScalerInstances", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.exportAutoScalerInstancesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerInstancesCallCount() int {
	fake.exportAutoScalerInstancesMutex.RLock()
	defer fake.exportAutoScalerInstancesMutex.RUnlock()
	return len(fake.exportAutoScalerInstancesArgsForCall)
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerInstancesCalls(stub func(*context.Context, cfclient.Org, cfclient.Space, cfclient.App, string) error) {
	fake.exportAutoScalerInstancesMutex.Lock()
	defer fake.exportAutoScalerInstancesMutex.Unlock()
	fake.ExportAutoScalerInstancesStub = stub
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerInstancesArgsForCall(i int) (*context.Context, cfclient.Org, cfclient.Space, cfclient.App, string) {
	fake.exportAutoScalerInstancesMutex.RLock()
	defer fake.exportAutoScalerInstancesMutex.RUnlock()
	argsForCall := fake.exportAutoScalerInstancesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerInstancesReturns(result1 error) {
	fake.exportAutoScalerInstancesMutex.Lock()
	defer fake.exportAutoScalerInstancesMutex.Unlock()
	fake.ExportAutoScalerInstancesStub = nil
	fake.exportAutoScalerInstancesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerInstancesReturnsOnCall(i int, result1 error) {
	fake.exportAutoScalerInstancesMutex.Lock()
	defer fake.exportAutoScalerInstancesMutex.Unlock()
	fake.ExportAutoScalerInstancesStub = nil
	if fake.exportAutoScalerInstancesReturnsOnCall == nil {
		fake.exportAutoScalerInstancesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.exportAutoScalerInstancesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerRules(arg1 *context.Context, arg2 cfclient.Org, arg3 cfclient.Space, arg4 cfclient.App, arg5 string) error {
	fake.exportAutoScalerRulesMutex.Lock()
	ret, specificReturn := fake.exportAutoScalerRulesReturnsOnCall[len(fake.exportAutoScalerRulesArgsForCall)]
	fake.exportAutoScalerRulesArgsForCall = append(fake.exportAutoScalerRulesArgsForCall, struct {
		arg1 *context.Context
		arg2 cfclient.Org
		arg3 cfclient.Space
		arg4 cfclient.App
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.ExportAutoScalerRulesStub
	fakeReturns := fake.exportAutoScalerRulesReturns
	fake.recordInvocation("ExportAutoScalerRules", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.exportAutoScalerRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerRulesCallCount() int {
	fake.exportAutoScalerRulesMutex.RLock()
	defer fake.exportAutoScalerRulesMutex.RUnlock()
	return len(fake.exportAutoScalerRulesArgsForCall)
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerRulesCalls(stub func(*context.Context, cfclient.Org, cfclient.Space, cfclient.App, string) error) {
	fake.exportAutoScalerRulesMutex.Lock()
	defer fake.exportAutoScalerRulesMutex.Unlock()
	fake.ExportAutoScalerRulesStub = stub
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerRulesArgsForCall(i int) (*context.Context, cfclient.Org, cfclient.Space, cfclient.App, string) {
	fake.exportAutoScalerRulesMutex.RLock()
	defer fake.exportAutoScalerRulesMutex.RUnlock()
	argsForCall := fake.exportAutoScalerRulesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerRulesReturns(result1 error) {
	fake.exportAutoScalerRulesMutex.Lock()
	defer fake.exportAutoScalerRulesMutex.Unlock()
	fake.ExportAutoScalerRulesStub = nil
	fake.exportAutoScalerRulesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerRulesReturnsOnCall(i int, result1 error) {
	fake.exportAutoScalerRulesMutex.Lock()
	defer fake.exportAutoScalerRulesMutex.Unlock()
	fake.ExportAutoScalerRulesStub = nil
	if fake.exportAutoScalerRulesReturnsOnCall == nil {
		fake.exportAutoScalerRulesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.exportAutoScalerRulesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerSchedules(arg1 *context.Context, arg2 cfclient.Org, arg3 cfclient.Space, arg4 cfclient.App, arg5 string) error {
	fake.exportAutoScalerSchedulesMutex.Lock()
	ret, specificReturn := fake.exportAutoScalerSchedulesReturnsOnCall[len(fake.exportAutoScalerSchedulesArgsForCall)]
	fake.exportAutoScalerSchedulesArgsForCall = append(fake.exportAutoScalerSchedulesArgsForCall, struct {
		arg1 *context.Context
		arg2 cfclient.Org
		arg3 cfclient.Space
		arg4 cfclient.App
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.ExportAutoScalerSchedulesStub
	fakeReturns := fake.exportAutoScalerSchedulesReturns
	fake.recordInvocation("ExportAutoScalerSchedules", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.exportAutoScalerSchedulesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerSchedulesCallCount() int {
	fake.exportAutoScalerSchedulesMutex.RLock()
	defer fake.exportAutoScalerSchedulesMutex.RUnlock()
	return len(fake.exportAutoScalerSchedulesArgsForCall)
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerSchedulesCalls(stub func(*context.Context, cfclient.Org, cfclient.Space, cfclient.App, string) error) {
	fake.exportAutoScalerSchedulesMutex.Lock()
	defer fake.exportAutoScalerSchedulesMutex.Unlock()
	fake.ExportAutoScalerSchedulesStub = stub
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerSchedulesArgsForCall(i int) (*context.Context, cfclient.Org, cfclient.Space, cfclient.App, string) {
	fake.exportAutoScalerSchedulesMutex.RLock()
	defer fake.exportAutoScalerSchedulesMutex.RUnlock()
	argsForCall := fake.exportAutoScalerSchedulesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerSchedulesReturns(result1 error) {
	fake.exportAutoScalerSchedulesMutex.Lock()
	defer fake.exportAutoScalerSchedulesMutex.Unlock()
	fake.ExportAutoScalerSchedulesStub = nil
	fake.exportAutoScalerSchedulesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAutoScalerExporter) ExportAutoScalerSchedulesReturnsOnCall(i int, result1 error) {
	fake.exportAutoScalerSchedulesMutex.Lock()
	defer fake.exportAutoScalerSchedulesMutex.Unlock()
	fake.ExportAutoScalerSchedulesStub = nil
	if fake.exportAutoScalerSchedulesReturnsOnCall == nil {
		fake.exportAutoScalerSchedulesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.exportAutoScalerSchedulesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAutoScalerExporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exportAutoScalerInstancesMutex.RLock()
	defer fake.exportAutoScalerInstancesMutex.RUnlock()
	fake.exportAutoScalerRulesMutex.RLock()
	defer fake.exportAutoScalerRulesMutex.RUnlock()
	fake.exportAutoScalerSchedulesMutex.RLock()
	defer fake.exportAutoScalerSchedulesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAutoScalerExporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ context.AutoScalerExporter = new(FakeAutoScalerExporter)
