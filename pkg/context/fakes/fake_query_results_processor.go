/*
 *  Copyright 2022 VMware, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmware-tanzu/app-migrator-for-cloud-foundry/pkg/context"
)

type FakeQueryResultsProcessor struct {
	ExecutePageQueryStub        func(*context.Context, context.QueryResultsCollector, func(page int, collector context.QueryResultsCollector) func() (int, error), context.ProcessFunc) (<-chan context.ProcessResult, error)
	executePageQueryMutex       sync.RWMutex
	executePageQueryArgsForCall []struct {
		arg1 *context.Context
		arg2 context.QueryResultsCollector
		arg3 func(page int, collector context.QueryResultsCollector) func() (int, error)
		arg4 context.ProcessFunc
	}
	executePageQueryReturns struct {
		result1 <-chan context.ProcessResult
		result2 error
	}
	executePageQueryReturnsOnCall map[int]struct {
		result1 <-chan context.ProcessResult
		result2 error
	}
	ExecuteQueryStub        func(*context.Context, context.QueryResultsCollector, func(collector context.QueryResultsCollector) (int, error), func(ctx *context.Context, value context.QueryResult) context.ProcessResult) (<-chan context.ProcessResult, error)
	executeQueryMutex       sync.RWMutex
	executeQueryArgsForCall []struct {
		arg1 *context.Context
		arg2 context.QueryResultsCollector
		arg3 func(collector context.QueryResultsCollector) (int, error)
		arg4 func(ctx *context.Context, value context.QueryResult) context.ProcessResult
	}
	executeQueryReturns struct {
		result1 <-chan context.ProcessResult
		result2 error
	}
	executeQueryReturnsOnCall map[int]struct {
		result1 <-chan context.ProcessResult
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeQueryResultsProcessor) ExecutePageQuery(arg1 *context.Context, arg2 context.QueryResultsCollector, arg3 func(page int, collector context.QueryResultsCollector) func() (int, error), arg4 context.ProcessFunc) (<-chan context.ProcessResult, error) {
	fake.executePageQueryMutex.Lock()
	ret, specificReturn := fake.executePageQueryReturnsOnCall[len(fake.executePageQueryArgsForCall)]
	fake.executePageQueryArgsForCall = append(fake.executePageQueryArgsForCall, struct {
		arg1 *context.Context
		arg2 context.QueryResultsCollector
		arg3 func(page int, collector context.QueryResultsCollector) func() (int, error)
		arg4 context.ProcessFunc
	}{arg1, arg2, arg3, arg4})
	stub := fake.ExecutePageQueryStub
	fakeReturns := fake.executePageQueryReturns
	fake.recordInvocation("ExecutePageQuery", []interface{}{arg1, arg2, arg3, arg4})
	fake.executePageQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQueryResultsProcessor) ExecutePageQueryCallCount() int {
	fake.executePageQueryMutex.RLock()
	defer fake.executePageQueryMutex.RUnlock()
	return len(fake.executePageQueryArgsForCall)
}

func (fake *FakeQueryResultsProcessor) ExecutePageQueryCalls(stub func(*context.Context, context.QueryResultsCollector, func(page int, collector context.QueryResultsCollector) func() (int, error), context.ProcessFunc) (<-chan context.ProcessResult, error)) {
	fake.executePageQueryMutex.Lock()
	defer fake.executePageQueryMutex.Unlock()
	fake.ExecutePageQueryStub = stub
}

func (fake *FakeQueryResultsProcessor) ExecutePageQueryArgsForCall(i int) (*context.Context, context.QueryResultsCollector, func(page int, collector context.QueryResultsCollector) func() (int, error), context.ProcessFunc) {
	fake.executePageQueryMutex.RLock()
	defer fake.executePageQueryMutex.RUnlock()
	argsForCall := fake.executePageQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeQueryResultsProcessor) ExecutePageQueryReturns(result1 <-chan context.ProcessResult, result2 error) {
	fake.executePageQueryMutex.Lock()
	defer fake.executePageQueryMutex.Unlock()
	fake.ExecutePageQueryStub = nil
	fake.executePageQueryReturns = struct {
		result1 <-chan context.ProcessResult
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryResultsProcessor) ExecutePageQueryReturnsOnCall(i int, result1 <-chan context.ProcessResult, result2 error) {
	fake.executePageQueryMutex.Lock()
	defer fake.executePageQueryMutex.Unlock()
	fake.ExecutePageQueryStub = nil
	if fake.executePageQueryReturnsOnCall == nil {
		fake.executePageQueryReturnsOnCall = make(map[int]struct {
			result1 <-chan context.ProcessResult
			result2 error
		})
	}
	fake.executePageQueryReturnsOnCall[i] = struct {
		result1 <-chan context.ProcessResult
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryResultsProcessor) ExecuteQuery(arg1 *context.Context, arg2 context.QueryResultsCollector, arg3 func(collector context.QueryResultsCollector) (int, error), arg4 func(ctx *context.Context, value context.QueryResult) context.ProcessResult) (<-chan context.ProcessResult, error) {
	fake.executeQueryMutex.Lock()
	ret, specificReturn := fake.executeQueryReturnsOnCall[len(fake.executeQueryArgsForCall)]
	fake.executeQueryArgsForCall = append(fake.executeQueryArgsForCall, struct {
		arg1 *context.Context
		arg2 context.QueryResultsCollector
		arg3 func(collector context.QueryResultsCollector) (int, error)
		arg4 func(ctx *context.Context, value context.QueryResult) context.ProcessResult
	}{arg1, arg2, arg3, arg4})
	stub := fake.ExecuteQueryStub
	fakeReturns := fake.executeQueryReturns
	fake.recordInvocation("ExecuteQuery", []interface{}{arg1, arg2, arg3, arg4})
	fake.executeQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQueryResultsProcessor) ExecuteQueryCallCount() int {
	fake.executeQueryMutex.RLock()
	defer fake.executeQueryMutex.RUnlock()
	return len(fake.executeQueryArgsForCall)
}

func (fake *FakeQueryResultsProcessor) ExecuteQueryCalls(stub func(*context.Context, context.QueryResultsCollector, func(collector context.QueryResultsCollector) (int, error), func(ctx *context.Context, value context.QueryResult) context.ProcessResult) (<-chan context.ProcessResult, error)) {
	fake.executeQueryMutex.Lock()
	defer fake.executeQueryMutex.Unlock()
	fake.ExecuteQueryStub = stub
}

func (fake *FakeQueryResultsProcessor) ExecuteQueryArgsForCall(i int) (*context.Context, context.QueryResultsCollector, func(collector context.QueryResultsCollector) (int, error), func(ctx *context.Context, value context.QueryResult) context.ProcessResult) {
	fake.executeQueryMutex.RLock()
	defer fake.executeQueryMutex.RUnlock()
	argsForCall := fake.executeQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeQueryResultsProcessor) ExecuteQueryReturns(result1 <-chan context.ProcessResult, result2 error) {
	fake.executeQueryMutex.Lock()
	defer fake.executeQueryMutex.Unlock()
	fake.ExecuteQueryStub = nil
	fake.executeQueryReturns = struct {
		result1 <-chan context.ProcessResult
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryResultsProcessor) ExecuteQueryReturnsOnCall(i int, result1 <-chan context.ProcessResult, result2 error) {
	fake.executeQueryMutex.Lock()
	defer fake.executeQueryMutex.Unlock()
	fake.ExecuteQueryStub = nil
	if fake.executeQueryReturnsOnCall == nil {
		fake.executeQueryReturnsOnCall = make(map[int]struct {
			result1 <-chan context.ProcessResult
			result2 error
		})
	}
	fake.executeQueryReturnsOnCall[i] = struct {
		result1 <-chan context.ProcessResult
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryResultsProcessor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executePageQueryMutex.RLock()
	defer fake.executePageQueryMutex.RUnlock()
	fake.executeQueryMutex.RLock()
	defer fake.executeQueryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeQueryResultsProcessor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ context.QueryResultsProcessor = new(FakeQueryResultsProcessor)
