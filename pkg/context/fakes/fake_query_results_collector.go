/* 
 *  Copyright 2022 VMware, Inc.
 *  
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmware-tanzu/app-migrator-for-cloud-foundry/pkg/context"
)

type FakeQueryResultsCollector struct {
	AddResultStub        func(context.QueryResult)
	addResultMutex       sync.RWMutex
	addResultArgsForCall []struct {
		arg1 context.QueryResult
	}
	CloseStub        func()
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	GetResultsStub        func() <-chan context.QueryResult
	getResultsMutex       sync.RWMutex
	getResultsArgsForCall []struct {
	}
	getResultsReturns struct {
		result1 <-chan context.QueryResult
	}
	getResultsReturnsOnCall map[int]struct {
		result1 <-chan context.QueryResult
	}
	ResultCountStub        func() int
	resultCountMutex       sync.RWMutex
	resultCountArgsForCall []struct {
	}
	resultCountReturns struct {
		result1 int
	}
	resultCountReturnsOnCall map[int]struct {
		result1 int
	}
	ResultsPerPageStub        func() int
	resultsPerPageMutex       sync.RWMutex
	resultsPerPageArgsForCall []struct {
	}
	resultsPerPageReturns struct {
		result1 int
	}
	resultsPerPageReturnsOnCall map[int]struct {
		result1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeQueryResultsCollector) AddResult(arg1 context.QueryResult) {
	fake.addResultMutex.Lock()
	fake.addResultArgsForCall = append(fake.addResultArgsForCall, struct {
		arg1 context.QueryResult
	}{arg1})
	stub := fake.AddResultStub
	fake.recordInvocation("AddResult", []interface{}{arg1})
	fake.addResultMutex.Unlock()
	if stub != nil {
		fake.AddResultStub(arg1)
	}
}

func (fake *FakeQueryResultsCollector) AddResultCallCount() int {
	fake.addResultMutex.RLock()
	defer fake.addResultMutex.RUnlock()
	return len(fake.addResultArgsForCall)
}

func (fake *FakeQueryResultsCollector) AddResultCalls(stub func(context.QueryResult)) {
	fake.addResultMutex.Lock()
	defer fake.addResultMutex.Unlock()
	fake.AddResultStub = stub
}

func (fake *FakeQueryResultsCollector) AddResultArgsForCall(i int) context.QueryResult {
	fake.addResultMutex.RLock()
	defer fake.addResultMutex.RUnlock()
	argsForCall := fake.addResultArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeQueryResultsCollector) Close() {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		fake.CloseStub()
	}
}

func (fake *FakeQueryResultsCollector) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeQueryResultsCollector) CloseCalls(stub func()) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeQueryResultsCollector) GetResults() <-chan context.QueryResult {
	fake.getResultsMutex.Lock()
	ret, specificReturn := fake.getResultsReturnsOnCall[len(fake.getResultsArgsForCall)]
	fake.getResultsArgsForCall = append(fake.getResultsArgsForCall, struct {
	}{})
	stub := fake.GetResultsStub
	fakeReturns := fake.getResultsReturns
	fake.recordInvocation("GetResults", []interface{}{})
	fake.getResultsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeQueryResultsCollector) GetResultsCallCount() int {
	fake.getResultsMutex.RLock()
	defer fake.getResultsMutex.RUnlock()
	return len(fake.getResultsArgsForCall)
}

func (fake *FakeQueryResultsCollector) GetResultsCalls(stub func() <-chan context.QueryResult) {
	fake.getResultsMutex.Lock()
	defer fake.getResultsMutex.Unlock()
	fake.GetResultsStub = stub
}

func (fake *FakeQueryResultsCollector) GetResultsReturns(result1 <-chan context.QueryResult) {
	fake.getResultsMutex.Lock()
	defer fake.getResultsMutex.Unlock()
	fake.GetResultsStub = nil
	fake.getResultsReturns = struct {
		result1 <-chan context.QueryResult
	}{result1}
}

func (fake *FakeQueryResultsCollector) GetResultsReturnsOnCall(i int, result1 <-chan context.QueryResult) {
	fake.getResultsMutex.Lock()
	defer fake.getResultsMutex.Unlock()
	fake.GetResultsStub = nil
	if fake.getResultsReturnsOnCall == nil {
		fake.getResultsReturnsOnCall = make(map[int]struct {
			result1 <-chan context.QueryResult
		})
	}
	fake.getResultsReturnsOnCall[i] = struct {
		result1 <-chan context.QueryResult
	}{result1}
}

func (fake *FakeQueryResultsCollector) ResultCount() int {
	fake.resultCountMutex.Lock()
	ret, specificReturn := fake.resultCountReturnsOnCall[len(fake.resultCountArgsForCall)]
	fake.resultCountArgsForCall = append(fake.resultCountArgsForCall, struct {
	}{})
	stub := fake.ResultCountStub
	fakeReturns := fake.resultCountReturns
	fake.recordInvocation("ResultCount", []interface{}{})
	fake.resultCountMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeQueryResultsCollector) ResultCountCallCount() int {
	fake.resultCountMutex.RLock()
	defer fake.resultCountMutex.RUnlock()
	return len(fake.resultCountArgsForCall)
}

func (fake *FakeQueryResultsCollector) ResultCountCalls(stub func() int) {
	fake.resultCountMutex.Lock()
	defer fake.resultCountMutex.Unlock()
	fake.ResultCountStub = stub
}

func (fake *FakeQueryResultsCollector) ResultCountReturns(result1 int) {
	fake.resultCountMutex.Lock()
	defer fake.resultCountMutex.Unlock()
	fake.ResultCountStub = nil
	fake.resultCountReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeQueryResultsCollector) ResultCountReturnsOnCall(i int, result1 int) {
	fake.resultCountMutex.Lock()
	defer fake.resultCountMutex.Unlock()
	fake.ResultCountStub = nil
	if fake.resultCountReturnsOnCall == nil {
		fake.resultCountReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.resultCountReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeQueryResultsCollector) ResultsPerPage() int {
	fake.resultsPerPageMutex.Lock()
	ret, specificReturn := fake.resultsPerPageReturnsOnCall[len(fake.resultsPerPageArgsForCall)]
	fake.resultsPerPageArgsForCall = append(fake.resultsPerPageArgsForCall, struct {
	}{})
	stub := fake.ResultsPerPageStub
	fakeReturns := fake.resultsPerPageReturns
	fake.recordInvocation("ResultsPerPage", []interface{}{})
	fake.resultsPerPageMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeQueryResultsCollector) ResultsPerPageCallCount() int {
	fake.resultsPerPageMutex.RLock()
	defer fake.resultsPerPageMutex.RUnlock()
	return len(fake.resultsPerPageArgsForCall)
}

func (fake *FakeQueryResultsCollector) ResultsPerPageCalls(stub func() int) {
	fake.resultsPerPageMutex.Lock()
	defer fake.resultsPerPageMutex.Unlock()
	fake.ResultsPerPageStub = stub
}

func (fake *FakeQueryResultsCollector) ResultsPerPageReturns(result1 int) {
	fake.resultsPerPageMutex.Lock()
	defer fake.resultsPerPageMutex.Unlock()
	fake.ResultsPerPageStub = nil
	fake.resultsPerPageReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeQueryResultsCollector) ResultsPerPageReturnsOnCall(i int, result1 int) {
	fake.resultsPerPageMutex.Lock()
	defer fake.resultsPerPageMutex.Unlock()
	fake.ResultsPerPageStub = nil
	if fake.resultsPerPageReturnsOnCall == nil {
		fake.resultsPerPageReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.resultsPerPageReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeQueryResultsCollector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addResultMutex.RLock()
	defer fake.addResultMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.getResultsMutex.RLock()
	defer fake.getResultsMutex.RUnlock()
	fake.resultCountMutex.RLock()
	defer fake.resultCountMutex.RUnlock()
	fake.resultsPerPageMutex.RLock()
	defer fake.resultsPerPageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeQueryResultsCollector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ context.QueryResultsCollector = new(FakeQueryResultsCollector)
