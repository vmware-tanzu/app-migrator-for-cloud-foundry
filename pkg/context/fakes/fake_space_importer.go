/*
 *  Copyright 2022 VMware, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmware-tanzu/app-migrator-for-cloud-foundry/pkg/context"
)

type FakeSpaceImporter struct {
	ImportSpaceStub        func(*context.Context, context.ProcessFunc, []string) (<-chan context.ProcessResult, error)
	importSpaceMutex       sync.RWMutex
	importSpaceArgsForCall []struct {
		arg1 *context.Context
		arg2 context.ProcessFunc
		arg3 []string
	}
	importSpaceReturns struct {
		result1 <-chan context.ProcessResult
		result2 error
	}
	importSpaceReturnsOnCall map[int]struct {
		result1 <-chan context.ProcessResult
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSpaceImporter) ImportSpace(arg1 *context.Context, arg2 context.ProcessFunc, arg3 []string) (<-chan context.ProcessResult, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.importSpaceMutex.Lock()
	ret, specificReturn := fake.importSpaceReturnsOnCall[len(fake.importSpaceArgsForCall)]
	fake.importSpaceArgsForCall = append(fake.importSpaceArgsForCall, struct {
		arg1 *context.Context
		arg2 context.ProcessFunc
		arg3 []string
	}{arg1, arg2, arg3Copy})
	stub := fake.ImportSpaceStub
	fakeReturns := fake.importSpaceReturns
	fake.recordInvocation("ImportSpace", []interface{}{arg1, arg2, arg3Copy})
	fake.importSpaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSpaceImporter) ImportSpaceCallCount() int {
	fake.importSpaceMutex.RLock()
	defer fake.importSpaceMutex.RUnlock()
	return len(fake.importSpaceArgsForCall)
}

func (fake *FakeSpaceImporter) ImportSpaceCalls(stub func(*context.Context, context.ProcessFunc, []string) (<-chan context.ProcessResult, error)) {
	fake.importSpaceMutex.Lock()
	defer fake.importSpaceMutex.Unlock()
	fake.ImportSpaceStub = stub
}

func (fake *FakeSpaceImporter) ImportSpaceArgsForCall(i int) (*context.Context, context.ProcessFunc, []string) {
	fake.importSpaceMutex.RLock()
	defer fake.importSpaceMutex.RUnlock()
	argsForCall := fake.importSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSpaceImporter) ImportSpaceReturns(result1 <-chan context.ProcessResult, result2 error) {
	fake.importSpaceMutex.Lock()
	defer fake.importSpaceMutex.Unlock()
	fake.ImportSpaceStub = nil
	fake.importSpaceReturns = struct {
		result1 <-chan context.ProcessResult
		result2 error
	}{result1, result2}
}

func (fake *FakeSpaceImporter) ImportSpaceReturnsOnCall(i int, result1 <-chan context.ProcessResult, result2 error) {
	fake.importSpaceMutex.Lock()
	defer fake.importSpaceMutex.Unlock()
	fake.ImportSpaceStub = nil
	if fake.importSpaceReturnsOnCall == nil {
		fake.importSpaceReturnsOnCall = make(map[int]struct {
			result1 <-chan context.ProcessResult
			result2 error
		})
	}
	fake.importSpaceReturnsOnCall[i] = struct {
		result1 <-chan context.ProcessResult
		result2 error
	}{result1, result2}
}

func (fake *FakeSpaceImporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.importSpaceMutex.RLock()
	defer fake.importSpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSpaceImporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ context.SpaceImporter = new(FakeSpaceImporter)
