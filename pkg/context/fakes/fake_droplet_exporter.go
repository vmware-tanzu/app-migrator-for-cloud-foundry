/*
 *  Copyright 2022 VMware, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/vmware-tanzu/app-migrator-for-cloud-foundry/pkg/context"
)

type FakeDropletExporter struct {
	DownloadDropletStub        func(*context.Context, cfclient.Org, cfclient.Space, cfclient.App, string) error
	downloadDropletMutex       sync.RWMutex
	downloadDropletArgsForCall []struct {
		arg1 *context.Context
		arg2 cfclient.Org
		arg3 cfclient.Space
		arg4 cfclient.App
		arg5 string
	}
	downloadDropletReturns struct {
		result1 error
	}
	downloadDropletReturnsOnCall map[int]struct {
		result1 error
	}
	DownloadPackagesStub        func(*context.Context, cfclient.Org, cfclient.Space, cfclient.App, string) error
	downloadPackagesMutex       sync.RWMutex
	downloadPackagesArgsForCall []struct {
		arg1 *context.Context
		arg2 cfclient.Org
		arg3 cfclient.Space
		arg4 cfclient.App
		arg5 string
	}
	downloadPackagesReturns struct {
		result1 error
	}
	downloadPackagesReturnsOnCall map[int]struct {
		result1 error
	}
	NumberOfPackagesStub        func(*context.Context, cfclient.App) (float64, error)
	numberOfPackagesMutex       sync.RWMutex
	numberOfPackagesArgsForCall []struct {
		arg1 *context.Context
		arg2 cfclient.App
	}
	numberOfPackagesReturns struct {
		result1 float64
		result2 error
	}
	numberOfPackagesReturnsOnCall map[int]struct {
		result1 float64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDropletExporter) DownloadDroplet(arg1 *context.Context, arg2 cfclient.Org, arg3 cfclient.Space, arg4 cfclient.App, arg5 string) error {
	fake.downloadDropletMutex.Lock()
	ret, specificReturn := fake.downloadDropletReturnsOnCall[len(fake.downloadDropletArgsForCall)]
	fake.downloadDropletArgsForCall = append(fake.downloadDropletArgsForCall, struct {
		arg1 *context.Context
		arg2 cfclient.Org
		arg3 cfclient.Space
		arg4 cfclient.App
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.DownloadDropletStub
	fakeReturns := fake.downloadDropletReturns
	fake.recordInvocation("DownloadDroplet", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.downloadDropletMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDropletExporter) DownloadDropletCallCount() int {
	fake.downloadDropletMutex.RLock()
	defer fake.downloadDropletMutex.RUnlock()
	return len(fake.downloadDropletArgsForCall)
}

func (fake *FakeDropletExporter) DownloadDropletCalls(stub func(*context.Context, cfclient.Org, cfclient.Space, cfclient.App, string) error) {
	fake.downloadDropletMutex.Lock()
	defer fake.downloadDropletMutex.Unlock()
	fake.DownloadDropletStub = stub
}

func (fake *FakeDropletExporter) DownloadDropletArgsForCall(i int) (*context.Context, cfclient.Org, cfclient.Space, cfclient.App, string) {
	fake.downloadDropletMutex.RLock()
	defer fake.downloadDropletMutex.RUnlock()
	argsForCall := fake.downloadDropletArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeDropletExporter) DownloadDropletReturns(result1 error) {
	fake.downloadDropletMutex.Lock()
	defer fake.downloadDropletMutex.Unlock()
	fake.DownloadDropletStub = nil
	fake.downloadDropletReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDropletExporter) DownloadDropletReturnsOnCall(i int, result1 error) {
	fake.downloadDropletMutex.Lock()
	defer fake.downloadDropletMutex.Unlock()
	fake.DownloadDropletStub = nil
	if fake.downloadDropletReturnsOnCall == nil {
		fake.downloadDropletReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadDropletReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDropletExporter) DownloadPackages(arg1 *context.Context, arg2 cfclient.Org, arg3 cfclient.Space, arg4 cfclient.App, arg5 string) error {
	fake.downloadPackagesMutex.Lock()
	ret, specificReturn := fake.downloadPackagesReturnsOnCall[len(fake.downloadPackagesArgsForCall)]
	fake.downloadPackagesArgsForCall = append(fake.downloadPackagesArgsForCall, struct {
		arg1 *context.Context
		arg2 cfclient.Org
		arg3 cfclient.Space
		arg4 cfclient.App
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.DownloadPackagesStub
	fakeReturns := fake.downloadPackagesReturns
	fake.recordInvocation("DownloadPackages", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.downloadPackagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDropletExporter) DownloadPackagesCallCount() int {
	fake.downloadPackagesMutex.RLock()
	defer fake.downloadPackagesMutex.RUnlock()
	return len(fake.downloadPackagesArgsForCall)
}

func (fake *FakeDropletExporter) DownloadPackagesCalls(stub func(*context.Context, cfclient.Org, cfclient.Space, cfclient.App, string) error) {
	fake.downloadPackagesMutex.Lock()
	defer fake.downloadPackagesMutex.Unlock()
	fake.DownloadPackagesStub = stub
}

func (fake *FakeDropletExporter) DownloadPackagesArgsForCall(i int) (*context.Context, cfclient.Org, cfclient.Space, cfclient.App, string) {
	fake.downloadPackagesMutex.RLock()
	defer fake.downloadPackagesMutex.RUnlock()
	argsForCall := fake.downloadPackagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeDropletExporter) DownloadPackagesReturns(result1 error) {
	fake.downloadPackagesMutex.Lock()
	defer fake.downloadPackagesMutex.Unlock()
	fake.DownloadPackagesStub = nil
	fake.downloadPackagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDropletExporter) DownloadPackagesReturnsOnCall(i int, result1 error) {
	fake.downloadPackagesMutex.Lock()
	defer fake.downloadPackagesMutex.Unlock()
	fake.DownloadPackagesStub = nil
	if fake.downloadPackagesReturnsOnCall == nil {
		fake.downloadPackagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadPackagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDropletExporter) NumberOfPackages(arg1 *context.Context, arg2 cfclient.App) (float64, error) {
	fake.numberOfPackagesMutex.Lock()
	ret, specificReturn := fake.numberOfPackagesReturnsOnCall[len(fake.numberOfPackagesArgsForCall)]
	fake.numberOfPackagesArgsForCall = append(fake.numberOfPackagesArgsForCall, struct {
		arg1 *context.Context
		arg2 cfclient.App
	}{arg1, arg2})
	stub := fake.NumberOfPackagesStub
	fakeReturns := fake.numberOfPackagesReturns
	fake.recordInvocation("NumberOfPackages", []interface{}{arg1, arg2})
	fake.numberOfPackagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDropletExporter) NumberOfPackagesCallCount() int {
	fake.numberOfPackagesMutex.RLock()
	defer fake.numberOfPackagesMutex.RUnlock()
	return len(fake.numberOfPackagesArgsForCall)
}

func (fake *FakeDropletExporter) NumberOfPackagesCalls(stub func(*context.Context, cfclient.App) (float64, error)) {
	fake.numberOfPackagesMutex.Lock()
	defer fake.numberOfPackagesMutex.Unlock()
	fake.NumberOfPackagesStub = stub
}

func (fake *FakeDropletExporter) NumberOfPackagesArgsForCall(i int) (*context.Context, cfclient.App) {
	fake.numberOfPackagesMutex.RLock()
	defer fake.numberOfPackagesMutex.RUnlock()
	argsForCall := fake.numberOfPackagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDropletExporter) NumberOfPackagesReturns(result1 float64, result2 error) {
	fake.numberOfPackagesMutex.Lock()
	defer fake.numberOfPackagesMutex.Unlock()
	fake.NumberOfPackagesStub = nil
	fake.numberOfPackagesReturns = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *FakeDropletExporter) NumberOfPackagesReturnsOnCall(i int, result1 float64, result2 error) {
	fake.numberOfPackagesMutex.Lock()
	defer fake.numberOfPackagesMutex.Unlock()
	fake.NumberOfPackagesStub = nil
	if fake.numberOfPackagesReturnsOnCall == nil {
		fake.numberOfPackagesReturnsOnCall = make(map[int]struct {
			result1 float64
			result2 error
		})
	}
	fake.numberOfPackagesReturnsOnCall[i] = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *FakeDropletExporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadDropletMutex.RLock()
	defer fake.downloadDropletMutex.RUnlock()
	fake.downloadPackagesMutex.RLock()
	defer fake.downloadPackagesMutex.RUnlock()
	fake.numberOfPackagesMutex.RLock()
	defer fake.numberOfPackagesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDropletExporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ context.DropletExporter = new(FakeDropletExporter)
